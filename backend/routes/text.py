import os
import sys
import httpx
from fastapi import APIRouter, HTTPException
from pydantic import BaseModel

router = APIRouter()
class Req(BaseModel):
    text: str

HF_TOKEN = os.getenv("HUGGINGFACE_TOKEN")
if not HF_TOKEN:
    raise RuntimeError("–ù–µ –Ω–∞–π–¥–µ–Ω HUGGINGFACE_TOKEN –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏")

MODEL   = os.getenv("TEXT_MODEL")
API_URL = f"https://api-inference.huggingface.co/models/{MODEL}"
HEADERS = {"Authorization": f"Bearer {HF_TOKEN}"}

# Debug-–ª–æ–≥–∏
print("üöÄ DEBUG text.py:", __file__, file=sys.stderr)
print("   API_URL =", API_URL, file=sys.stderr)
print("   HEADERS =", HEADERS, file=sys.stderr)

@router.post("/text")
async def gen_text(req: Req):
    prompt = (
            "–ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–æ–≥–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞ –¥–Ω–µ–≤–Ω–∏–∫–∞ –≤–æ–µ–Ω–Ω—ã—Ö –ª–µ—Ç, "
            "—Å–æ–∑–¥–∞–π—Ç–µ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç, —Å–æ—Ö—Ä–∞–Ω—è—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—É—é –Ω–∞—Å—ã—â–µ–Ω–Ω–æ—Å—Ç—å:\n\n"
            + req.text
    )
    payload = {"inputs": prompt, "parameters": {"max_new_tokens": 200}}
    async with httpx.AsyncClient(timeout=120.0) as client:
        resp = await client.post(API_URL, headers=HEADERS, json=payload)
    if resp.status_code != 200:
        raise HTTPException(status_code=resp.status_code, detail=resp.text)
    data = resp.json()
    # GPT2 –º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å —Å–ø–∏—Å–æ–∫
    text = data[0].get("generated_text") if isinstance(data, list) else data.get("generated_text", "")
    return {"text": text}
