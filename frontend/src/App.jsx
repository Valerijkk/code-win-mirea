import React, { useState, useEffect, useRef } from 'react';
import './App.css';

export default function App() {
    const [messages, setMessages] = useState([]); // { role, text }
    const [input, setInput]       = useState('');
    const [loading, setLoading]   = useState(false);
    const bottomRef = useRef(null);

    // –∞–≤—Ç–æ—Å–∫—Ä–æ–ª–ª
    useEffect(() => {
        bottomRef.current?.scrollIntoView({ behavior: 'smooth' });
    }, [messages]);

    const sendMessage = async e => {
        e.preventDefault();
        if (!input.trim()) return;

        // 1) —Å–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ
        setMessages(ms => [...ms, { role: 'user', text: input }]);
        setLoading(true);

        try {
            // 2) POST /api/generate
            const res = await fetch('/api/generate', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ prompt: input }),
            });
            const data = await res.json();
            console.log('–ü–æ–ª—É—á–∏–ª–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞:', data);

            // 3) –µ—Å–ª–∏ –µ—Å—Ç—å think ‚Üí —Å–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º ¬´–º—ã—Å–ª—å¬ª
            if (data.think) {
                setMessages(ms => [
                    ...ms,
                    { role: 'bot-think', text: data.think }
                ]);
            }

            // 4) –ø–æ—Ç–æ–º –æ—Ç–≤–µ—Ç
            setMessages(ms => [
                ...ms,
                { role: 'bot', text: data.response }
            ]);
        } catch (err) {
            setMessages(ms => [
                ...ms,
                { role: 'bot', text: `–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: ${err.message}` }
            ]);
        } finally {
            setInput('');
            setLoading(false);
        }
    };

    return (
        <div className="app">
            <header className="header">üêã DeepSeek</header>

            <div className="chat-container">
                {messages.map((m, i) => (
                    <div key={i} className={`message ${m.role}`}>
                        {m.text}
                    </div>
                ))}
                <div ref={bottomRef}/>
            </div>

            <form className="input-bar" onSubmit={sendMessage}>
                <input
                    type="text"
                    placeholder="–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
                    value={input}
                    onChange={e => setInput(e.target.value)}
                    disabled={loading}
                />
                <button type="submit" disabled={loading || !input.trim()}>
                    {loading ? '‚Ä¶' : '‚û§'}
                </button>
            </form>
        </div>
    );
}
