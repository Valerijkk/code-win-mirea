// src/App.js
import React, { useState, useEffect, useRef } from 'react';
import './App.css';
import Button from './components/Button';
import ImageBtn from './components/Image';
import Otstoy from './components/Otstoy';

export default function App() {
    const [messages, setMessages]         = useState([]); // { role, type, content }
    const [input, setInput]               = useState('');
    const [loading, setLoading]           = useState(false);
    const [buttonsState, setButtonsState] = useState([false, false, false, false]);
    const bottomRef                       = useRef(null);
    const [isWindowVisible, setIsWindowVisible] = useState(false);

    const toggleSideBar = () => {
        setIsWindowVisible(!isWindowVisible);
    };
    // –∞–≤—Ç–æ—Å–∫—Ä–æ–ª–ª –≤–Ω–∏–∑
    useEffect(() => {
        bottomRef.current?.scrollIntoView({ behavior: 'smooth' });
    }, [messages]);

    const toggleButtonState = (index) => {
        setButtonsState((prevState) => {
            const newState = [...prevState];
            newState[index] = !newState[index];
            return newState;
        });
    const toggleSideBar = () => {
        setIsWindowVisible(v => !v);
    };

    const toggleButtonState = index => {
        setButtonsState(bs =>
            bs.map((b, i) => (i === index ? !b : b))
        );
    };

    const sendMessage = async e => {
        e.preventDefault();
        if (!input.trim()) return;
        if (buttonsState.every(b => !b)) return;  // –Ω–∏ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–∏ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ

        // –ø—É—à–∏–º —Å–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ
        setMessages(ms => [
            ...ms,
            { role: 'user', type: 'text', content: input }
        ]);
        setLoading(true);

        // –æ–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∂–∏–º –∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç
        const idx = buttonsState.findIndex(b => b);
        let endpoint, payload;
        switch (idx) {
            case 0:
                endpoint = '/api/emotion';
                payload = { text: input };
                break;
            case 1:
                endpoint = '/api/text';
                payload = { text: input };
                break;
            case 2:
                endpoint = '/api/generate';
                payload = { prompt: input };
                break;
            case 3:
                endpoint = '/api/music';
                payload = { prompt: input };
                break;
            default:
                endpoint = '/api/generate';
                payload = { prompt: input };
        }

        try {
            const res = await fetch(endpoint, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(payload),
            });
            const data = await res.json();

            if (!res.ok) {
                throw new Error(data.detail || JSON.stringify(data));
            }

            const resp = data.response;
            let botMsg;
            if (idx === 2) {
                // –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                botMsg = { role: 'bot', type: 'image', content: resp };
            } else if (idx === 3) {
                // –º—É–∑—ã–∫–∞ (URL –∏–ª–∏ base64)
                botMsg = { role: 'bot', type: 'audio', content: resp };
            } else {
                // —Ç–µ–∫—Å—Ç –∏–ª–∏ —ç–º–æ—Ü–∏–∏
                botMsg = { role: 'bot', type: 'text', content: resp };
            }

            setMessages(ms => [...ms, botMsg]);
        } catch (err) {
            setMessages(ms => [
                ...ms,
                { role: 'bot', type: 'text', content: `–û—à–∏–±–∫–∞: ${err.message}` }
            ]);
        } finally {
            setInput('');
            setLoading(false);
        }
    };

    return (
        <div class="w-screen h-screen bg-neutral-800 flex sm:text-xs md:text-xs lg:text-xs xl:text-sm 2xl:text-base">
            {isWindowVisible &&  (
                <div class="w-3/19 h-screen bg-neutral-900 flex flex-col justify-between text-neutral-400 font-semibold"> {/* —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç–æ–µ –±–æ–∫–æ–≤–æ–µ –º–µ–Ω—é */}
                    <div class="h-1/9 w-full flex justify-between">
                        <div class="w-6/9 flex flex-col justify-center"> {/* –Ω–∞–∑–≤–∞–Ω–∏–µ */}
                            <div class="h-1/2 w-full text-center sm:text-base md:text-lg lg:text-xl xl:text-2xl 2xl:text-3xl">
                                –∫–∏—Ç—ë–Ω–æ–∫
                            </div>
                        </div>
    // –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ä–µ–∂–∏–º –≤—ã–±—Ä–∞–Ω
    const isSendDisabled = loading || !input.trim() || buttonsState.every(b => !b);

                        <Otstoy help="—Å–≤–µ—Ä–Ω—É—Ç—å –º–µ–Ω—é" image="‚û§" onClick={toggleSideBar}/> {/* —Å–≤—ë—Ä—Ç–æ–≤–∞–Ω–∏–µ */}
                    </div>

<<<<<<< HEAD
                    <div class="h-1/17 w-5/9 flex justify-center">
                        <button class="w-13/16 bg-blue-600 hover:bg-blue-700 rounded-2xl flex flex-col justify-center">  {/* –Ω–æ–≤—ã–π —á–∞—Ç */}
                            <div class="h-1/2 flex justify-center">
                                <image class="w-1/5 bg-white">

                                </image>
                                <div class="pt-1 w-13/20 text-white sm:text-xs md:text-xs lg:text-xs xl:text-xs 2xl:text-sm text-right">
                                    –ù–æ–≤—ã–π —á–∞—Ç
                                </div>
                            </div>
                        </button>
                    </div>

                    <div class="h-full w-full">  {/* –∑–∞–≥–æ—Ç–æ–≤–∫–∞ –ø–æ–¥ —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ */}

                    </div>

                    <div class="h-1/12 w-full flex flex-col justify-center"> {/* –ø—Ä–æ—Ñ–∏–ª—å */}
                        <div class="h-1/2 flex justify-center">
                            <div class="w-7/8 flex justify-start hover:bg-neutral-800 rounded-lg">
                                <div class="w-1/8 rounded-full">
                                    <image class="text-neutral-300 sm:text-base md:text-lg lg:text-xl xl:text-2xl 2xl:text-3xl">
                                        ‚òª
                                    </image>
                                </div>

                                <div class="pl-2 pt-2 w-17/24 sm:text-xs md:text-xs lg:text-xs xl:text-xs 2xl:text-sm">
                                    –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            )}

            {!isWindowVisible &&  (
                <div class="w-1/27 h-screen bg-neutral-900 flex flex-col justify-between"> {/* —Å–∂–∞—Ç–æ–µ –±–æ–∫–æ–≤–æ–µ –º–µ–Ω—é */}
                    <div class="h-1/2"> {/* –≤–≤–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å */}
                        <div class="h-1/6 flex justify-center"> {/* –ª–æ–≥–æ */}
                            <div class="w-2/3 flex flex-col justify-center">
                                <button class="h-1/2 text-center sm:text-lg md:text-xl lg:text-2xl xl:text-3xl 2xl:text-4xl">
                                    <image>
                                        üêã {/* –∫–∏—Ç, –ø—Ä–æ—Å—Ç–æ –∫–∏—Ç, –¥—É–º–∞–µ—Ç, —á—Ç–æ –∫—Ä—É—Ç–æ–π, –Ω–æ –Ω–∞ –¥–µ–ª–µ –≤—Å—ë —Å–æ–≤—Å–µ–º –Ω–µ —Ç–∞–∫, —ç—Ç–æ —è –µ–≥–æ —Å—é–¥–∞ –∑–∞—Å—É–Ω—É–ª, —è –¥–ª—è –Ω–µ–≥–æ –±–æ–≥, –µ—Å–ª–∏ –∑–∞—Ö–æ—á—É, —Ç–æ –µ–≥–æ —Ç—É—Ç –Ω–µ –±—É–¥–µ—Ç, –Ω–æ –æ–Ω –º–∏–ª–∏, —Ç–∞–∫ —á—Ç–æ —è –µ–≥–æ –ø–æ–∫–∞ —á—Ç–æ –æ—Å—Ç–∞–≤–ª—é, –Ω–æ –Ω–µ –¥–∞–π –±–æ–≥ –æ–Ω —á—Ç–æ-–ª–∏–±–æ –Ω–∞—Ç–≤–æ—Ä–∏—Ç */}
                                    </image>
                                </button>
                            </div>
                        </div>

                        <Image help="—Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—å –º–µ–Ω—é" image="‚û§" onClick={toggleSideBar}/> {/* —Ä–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏–µ */}

                        {/*<Image help="–¥–æ–±–∞–≤–∏—Ç—å —á–∞—Ç" image=""/> {/* –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞ */}
                    </div>

                    <div class="h-1/2 flex flex-col justify-end"> {/* –Ω–∏–∂–Ω—è—è —á–∞—Å—Ç—å */}
                        <Image help="–æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ—Ñ–∏–ª—å" image="‚òª"/> {/* –∞–∫–∫–∞—É–Ω—Ç –∏ –≤—Å—ë —Ç–∞–∫–æ–µ */}
                    </div>
                </div>
            )}

            <div class="w-full h-full flex justify-center"> {/* –æ—Å–Ω–æ–≤–Ω–æ–π —ç–∫—Ä–∞–Ω */}
                <div class="w-12/28">
                    <div class="h-2/28 flex flex-col justify-center"> {/* –∑–∞–≥–æ–ª–æ–≤–æ–∫ */}
                        <div class="text-center text-white font-semibold">
                            Greeting and Offering Assistance
                        </div>
                    </div>

                    <div class="h-21/28"> {/* —á–∞—Ç */} 
=======
                    {/* –ß–∞—Ç */}
                    <div className="h-21/28 overflow-y-auto p-4 flex flex-col">
>>>>>>> 46b9a936fa9f1d7106fb37c9c2d03cdc64cc1675
                        {messages.map((m, i) => (
                            <div key={i} className={`message ${m.role}`}>
                                {m.type === 'image' ? (
                                    <img
                                        src={`data:image/png;base64,${m.content}`}
                                        alt="generated"
                                        className="max-w-full rounded"
                                    />
                                ) : m.type === 'audio' ? (
                                    <audio controls src={m.content} className="w-full" />
                                ) : (
                                    <pre className="whitespace-pre-wrap">{m.content}</pre>
                                )}
                            </div>
                        ))}
                        <div ref={bottomRef} />
                    </div>

                                    <div class="h-1/3 flex justify-between"> {/* –æ–ø—Ü–∏–∏ */}
                                        <div class="w-18/20"> {/* –ª–µ–≤–∞—è —á–∞—Å—Ç—å */} 
                                            <Button text="–∞–Ω–∞–ª–∏–∑" help="–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞" image="" index={0} isActive={buttonsState[0]} toggleState={toggleButtonState}/> {/* —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ */}

                                            <Button text="—Ç–µ–∫—Å—Ç" help="—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç –ø–æ –≤–≤–µ–¥—ë–Ω–æ–º—É" image="" index={1} isActive={buttonsState[1]} toggleState={toggleButtonState}/> {/* –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ */}

                                            <Button text="–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ" help="—Å–æ–∑–¥–∞—Å—Ç –∫–∞—Ä—Ç–∏–Ω—É –ø–æ —Ç–µ–∫—Å—Ç—É" image="" index={2} isActive={buttonsState[2]} toggleState={toggleButtonState}/> {/* –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è */}

                                            <Button text="–º—É–∑—ã–∫–∞" help="–Ω–∞–ø–∏—à–µ—Ç –ø–µ—Å–Ω—é –ø–æ –≤–≤–µ–¥—ë–Ω–æ–º—É" image="" index={3} isActive={buttonsState[3]} toggleState={toggleButtonState}/> {/* –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –º—É–∑—ã–∫–∏ */}
                                        </div>
                    {/* –ü–∞–Ω–µ–ª—å –≤–≤–æ–¥–∞ */}
                    <div className="h-5/28 flex items-center justify-center">
                        <form className="w-full flex flex-col" onSubmit={sendMessage}>
                            <input
                                className="w-full p-2 rounded-2xl mb-2 bg-neutral-700 text-neutral-200"
                                type="text"
                                placeholder="–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
                                value={input}
                                onChange={e => setInput(e.target.value)}
                                disabled={loading}
                            />

                            <div className="flex items-center">
                                <div className="flex space-x-2 flex-1">
                                    <Button
                                        text="–∞–Ω–∞–ª–∏–∑"
                                        help="—ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑"
                                        index={0}
                                        isActive={buttonsState[0]}
                                        toggleState={toggleButtonState}
                                    />
                                    <Button
                                        text="—Ç–µ–∫—Å—Ç"
                                        help="—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç"
                                        index={1}
                                        isActive={buttonsState[1]}
                                        toggleState={toggleButtonState}
                                    />
                                    <Button
                                        text="–∏–∑–æ–±—Ä."
                                        help="—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"
                                        index={2}
                                        isActive={buttonsState[2]}
                                        toggleState={toggleButtonState}
                                    />
                                    <Button
                                        text="–º—É–∑—ã–∫–∞"
                                        help="—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º—É–∑—ã–∫—É"
                                        index={3}
                                        isActive={buttonsState[3]}
                                        toggleState={toggleButtonState}
                                    />
                                </div>
                                <button
                                    className="ml-2 w-12 h-12 bg-blue-600 rounded-full disabled:opacity-50 flex items-center justify-center"
                                    type="submit"
                                    disabled={isSendDisabled}
                                >
                                    {loading ? '‚Ä¶' : '‚Üí'}
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    );
}
