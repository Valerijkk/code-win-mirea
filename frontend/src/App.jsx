import React, { useState, useEffect, useRef } from 'react';
import './App.css';
import Button from './components/Button';
import Image from './components/Image';

export default function App() {
    const [messages, setMessages] = useState([]); // { role, text }
    const [input, setInput]       = useState('');
    const [loading, setLoading]   = useState(false);
    const bottomRef = useRef(null);

    // –∞–≤—Ç–æ—Å–∫—Ä–æ–ª–ª
    useEffect(() => {
        bottomRef.current?.scrollIntoView({ behavior: 'smooth' });
    }, [messages]);

    const sendMessage = async e => {
        e.preventDefault();
        if (!input.trim()) return;

        // 1) —Å–≤–æ—ë —Å–æ–æ–±—â–µ–Ω–∏–µ
        setMessages(ms => [...ms, { role: 'user', text: input }]);
        setLoading(true);

        try {
            // 2) POST /api/generate
            const res = await fetch('/api/generate', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ prompt: input }),
            });
            const data = await res.json();
            console.log('–ü–æ–ª—É—á–∏–ª–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞:', data);

            // 3) –µ—Å–ª–∏ –µ—Å—Ç—å think ‚Üí —Å–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤–ª—è–µ–º ¬´–º—ã—Å–ª—å¬ª
            if (data.think) {
                setMessages(ms => [
                    ...ms,
                    { role: 'bot-think', text: data.think }
                ]);
            }

            // 4) –ø–æ—Ç–æ–º –æ—Ç–≤–µ—Ç
            setMessages(ms => [
                ...ms,
                { role: 'bot', text: data.response }
            ]);
        } catch (err) {
            setMessages(ms => [
                ...ms,
                { role: 'bot', text: `–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞: ${err.message}` }
            ]);
        } finally {
            setInput('');
            setLoading(false);
        }
    };

    return (
        <div class="w-screen h-screen bg-neutral-800 flex">
            <header class="w-1/28 h-screen bg-neutral-900 flex flex-col justify-between"> {/* –±–æ–∫–æ–≤–æ–π —Ö–µ–¥–µ—Ä */}
                <div class="h-1/2"> {/* –≤–≤–µ—Ä—Ö–Ω—è—è —á–∞—Å—Ç—å */}
                    <div class="h-1/6 flex justify-center"> {/* –ª–æ–≥–æ */}
                        <div class="w-2/3 flex flex-col justify-center">
                            <button class="h-1/2 text-center text-4xl">
                                <image>
                                    üêã
                                </image>
                            </button>
                        </div>
                    </div>

                    <Image image=""/> {/* —Å–≤—ë—Ä—Ç–æ–≤–∞–Ω–∏–µ/—Ä–∞–∑–≤—ë—Ä—Ç—ã–≤–∞–Ω–∏–µ */}

                    <Image image=""/> {/* –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–∞—Ç–∞ */}
                </div>
                <div class="h-1/2 flex flex-col justify-end"> {/* –Ω–∏–∂–Ω—è—è —á–∞—Å—Ç—å */}
                    <Image image=""/> {/* –∞–∫–∫–∞—É–Ω—Ç –∏ –≤—Å—ë —Ç–∞–∫–æ–µ */}
                </div>
            </header>

            <div class="w-27/28 h-full flex justify-center"> {/* –æ—Å–Ω–æ–≤–Ω–æ–π —ç–∫—Ä–∞–Ω */}
                <div class="w-12/28">
                    <div class="h-2/28 flex flex-col justify-center"> {/* –∑–∞–≥–æ–ª–æ–≤–æ–∫ */}
                        <div class="text-center text-white font-semibold">
                            Greeting and Offering Assistance
                        </div>
                    </div>

                    <div class="h-21/28"> {/* —á–∞—Ç */} 
                        {messages.map((m, i) => (
                            <div key={i} className={`message ${m.role}`}>
                                {m.text}
                            </div>
                        ))}
                        <div ref={bottomRef}/>
                    </div>

                    <div class="h-5/28 flex flex-col justify-center"> {/* –æ–∫–Ω–æ –≤–≤–æ–¥–∞ –∏ –æ—Å—Ç–∞–ª—å–Ω–æ–≥–æ */}
                        <div class="h-5/8 bg-neutral-700 rounded-3xl flex justify-center">
                            <div class="w-27/28 flex flex-col justify-center">
                                <form class="h-22/28 flex flex-col justify-between" onSubmit={sendMessage}>
                                    <input class="w-full h-1/3 text-neutral-200" // –æ–∫–Ω–æ –≤–≤–æ–¥–∞
                                        type="text"
                                        placeholder="–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ..."
                                        value={input}
                                        onChange={e => setInput(e.target.value)}
                                        disabled={loading}
                                    />
                                    <div class="h-1/3 flex justify-between"> {/* –æ–ø—Ü–∏–∏ */}
                                        <div> {/* –ª–µ–≤–∞—è —á–∞—Å—Ç—å */} 
                                            <Button text="–∞–Ω–∞–ª–∏–∑" image=""/> {/* —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ */}

                                            <Button text="—Ç–µ–∫—Å—Ç" image=""/> {/* –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ */}

                                            <Button text="–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ" image=""/> {/* –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è */}

                                            <Button text="–º—É–∑—ã–∫–∞" image=""/> {/* –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –º—É–∑—ã–∫–∏ */}
                                        </div>
                                        <div class="w-2/20 flex justify-between"> {/* –ø—Ä–∞–≤–∞—è —á–∞—Å—Ç—å */}
                                            <button class="w-2/5 h-full bg-white" type="submit" disabled={loading || !input.trim()}> {/* –ø—Ä–∏–ª–æ–∂–∏—Ç—å —Ñ–∞–π–ª—ã */}
                                                {loading ? '‚Ä¶' : ''}
                                            </button>
                                            <button class="w-2/5 h-full bg-neutral-500 rounded-full text-center text-2xl leading-1 text-neutral-700" type="submit" disabled={loading || !input.trim()}> {/* –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å */}
                                                {loading ? '‚Ä¶' : '‚Üë'}
                                            </button>
                                        </div>
                                    </div>
                                </form>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    );
}
